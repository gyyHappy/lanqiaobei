package _2020第一场;

/**
 * 【问题描述】
 *
 * 把 1 ∼ 2020 放在 2 × 1010 的矩阵里。要求同一行中右边的比左边大，同一
 *
 * 列中下边的比上边的大。一共有多少种方案？
 *
 * 答案很大，你只需要给出方案数除以 2020 的余数即可。
 * @author GYY
 * @version 1.0
 * @date 2020/7/23 10:21
 */
public class Five {
    public static void main(String[] args) {
        int n = 2020;
        //dp[i][j]表示，从i个数选j个数
        int[][] dp = new int[3000][3000];
        dp[1][1] = 1; // 1必然放在第一行
        //只要保证第一行的数比第二行的数多就可以了，后面的数会越来越大，会符合小到大的规律
        for (int i = 2; i <= n; i++) {
            for (int j = 1; j <= i; j++) {
                dp[i][j] += dp[i - 1][j - 1]; // 放到第一层
                if (i - j <= j) {
                    //当进入if说明，i没有超过j的两倍了，
                    // （如果超过j的两倍，说明第一行肯定比第二行少了）
                    //本身就是取一半的数字，如果超过两倍，说明取不到一半，不能参与计算
                    dp[i][j] += dp[i - 1][j];   //放到第二层
                }
                dp[i][j] %= 2020;
            }
        }
        System.out.println(dp[n][n/2]);
    }
}
