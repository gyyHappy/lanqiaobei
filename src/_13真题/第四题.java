package _13真题;

import java.math.BigDecimal;
import java.math.BigInteger;

/**
 * @author GYY
 * @version 1.0
 * @date 2020/3/29 16:54
 *
 * 黄金分割数0.61803... 是个无理数，这个常数十分重要，在许多工程问题中会出现。有时需要把这个数字求得很精确。
 * 对于某些精密工程，常数的精度很重要。也许你听说过哈勃太空望远镜，它首次升空后就发现了一处人工加工错误，对那样一个庞然大物，其实只是镜面加工时有比头发丝还细许多倍的一处错误而已，却使它成了“近视眼”!!
 * 言归正传，我们如何求得黄金分割数的尽可能精确的值呢？有许多方法。
 * 比较简单的一种是用连分数：
 *
 *               1
 * 黄金数 = ---------------------
 *                     1
 *          1 + -----------------
 *                       1
 *              1 + -------------
 *                         1
 *                  1 + ---------
 *                       1 + ...
 * 这个连分数计算的“层数”越多，它的值越接近黄金分割数。
 * 请你利用这一特性，求出黄金分割数的足够精确值，要求四舍五入到小数点后100位。
 * 小数点后3位的值为：0.618
 * 小数点后4位的值为：0.6180
 * 小数点后5位的值为：0.61803
 * 小数点后7位的值为：0.6180340
 *
 * 要点： 1、理解黄金数
 *          第一层~第五层    1  2  3  5  8
 *                           -  -  -  -  -
 *                           2  3  5  8  13
 *          发现规律 斐波那契数 f（n-1）/ f（n）
 *
 *        2、数据类型
 *           数据过大要采用 BigInteger 和 BigDecimal
 *
 *              BigInteger ：如果我们使用的整数范围超过了long型怎么办？这个时候，就只能用软件来模拟一个大整数。
 *              java.math.BigInteger就是用来表示任意大小的整数。BigInteger内部用一个int[]数组来模拟一个非常大的整数
 *              对BigInteger做运算的时候，只能使用实例方法
 *                  BigInteger i1 = new BigInteger("1234567890");
 *                  BigInteger i2 = new BigInteger("12345678901234567890");
 *                  BigInteger sum = i1.add(i2);
 *
 *              BigDecimal ：和BigInteger类似，BigDecimal可以表示一个任意大小且精度完全准确的浮点数。
 *              divide(new BigDecimal(b,110),BigDecimal.ROUND_HALF_DOWN);
 *              两个参数分别表示 除数 和 四舍五入
 *
 *        3、比较
 *          循环100次的结果 0.61803398874989484820458683436563811772029984871889165393979351592049489133579852579526037628096059805
 *          循环200次的结果 0.61803398874989484820458683436563811772030917980576286213544862270526046281890244969233401224637257135
 *          循环300次的结果 0.61803398874989484820458683436563811772030917980576286213544862270526046281890244970720720418939113748
 *          循环400次的结果 0.61803398874989484820458683436563811772030917980576286213544862270526046281890244970720720418939113748
 *
 *          可以看出当循环300次后 数值不变 这是小数点后101位 自己手动四舍五入
 *          0.6180339887498948482045868343656381177203091798057628621354486227052604628189024497072072041893911375
 */
public class 第四题 {
    public static void main(String[] args) {
        BigInteger a = BigInteger.ONE;
        BigInteger b = BigInteger.ONE;
        for (int i = 3; i < 400; i++) {
            BigInteger t = b;
            b = a.add(b);
            a = t;
        }
        BigDecimal res = new BigDecimal(a,110).divide(new BigDecimal(b,110),BigDecimal.ROUND_HALF_DOWN);
        System.out.println(res.toPlainString().substring(0,103));
        System.out.println(res.scale());
    }
}
